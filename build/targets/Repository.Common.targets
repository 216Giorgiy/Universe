<Project>
  <ItemGroup>
    <ProjectReference Include="@(ProjectReference)" Condition="'$(CompileFromSource)' == 'true'" />
  </ItemGroup>

  <PropertyGroup>
    <OutputType />

    <CoreBuildDependsOn>
      GetTargetPath;
    </CoreBuildDependsOn>

    <CoreBuildDependsOn Condition="'$(CompileFromSource)' != 'true' AND '$(DesignTimeBuild)' != 'true' ">
      $(CoreBuildDependsOn);
      DownloadPreBuiltArtifacts;
    </CoreBuildDependsOn>

    <CoreBuildDependsOn Condition="'$(CompileFromSource)' == 'true' AND '$(DesignTimeBuild)' != 'true' ">
      $(CoreBuildDependsOn);
      ResolveReferences;
      GeneratePropsFiles;
      Compile;
    </CoreBuildDependsOn>

    <CoreCleanDependsOn>
      CleanRepo;
    </CoreCleanDependsOn>

    <ResolveReferencesDependsOn>
      ComputeTransitiveRepoReferences;
      AssignProjectConfiguration;
      ResolveProjectReferences;
      FindInvalidProjectReferences;
      ResolveArtifactReferences;
    </ResolveReferencesDependsOn>

    <GetProjectReferencesDependsOn>
      $(GetProjectReferencesDependsOn);
      ComputeTransitiveRepoReferences;
    </GetProjectReferencesDependsOn>

    <GetTargetPathDependsOn>
      ResolveArtifacts;
    </GetTargetPathDependsOn>

    <GeneratedPackageVersionPropsPath>$(IntermediateOutputPath)dependencies.g.props</GeneratedPackageVersionPropsPath>
    <GeneratedRestoreSourcePropsPath>$(IntermediateOutputPath)sources.g.props</GeneratedRestoreSourcePropsPath>
    <!-- Fallbacks, in case RestorePackagesPath hasn't been set. (It should be set in Directory.Build.props) -->
    <RestorePackagesPath Condition="'$(RestorePackagesPath)' == '' AND '$(NUGET_PACKAGES)' != ''">$(NUGET_PACKAGES)</RestorePackagesPath>
    <RestorePackagesPath Condition="'$(RestorePackagesPath)' == '' AND '$(USERPROFILE)' != ''">$(USERPROFILE).nuget\packages\</RestorePackagesPath>
    <RestorePackagesPath Condition="'$(RestorePackagesPath)' == '' AND '$(HOME)' != ''">$(HOME).nuget\packages\</RestorePackagesPath>
    <RestorePackagesPath Condition="'$(RestorePackagesPath)' == ''">$(MSBuildThisFileDirectory)..\..\obj\nuget\packages\</RestorePackagesPath>
  </PropertyGroup>

  <Target Name="ComputeTransitiveRepoReferences">
    <MSBuild Targets="GetProjectReferences"
      Projects="@(ProjectReference)"
      BuildInParallel="true">
      <Output TaskParameter="TargetOutputs" ItemName="_TransitiveProjectReference" />
    </MSBuild>

    <RemoveDuplicates Inputs="@(_TransitiveProjectReference)">
      <Output TaskParameter="Filtered" ItemName="_TransitiveProjectReferenceFiltered" />
    </RemoveDuplicates>

    <ItemGroup>
      <ProjectReference Include="@(_TransitiveProjectReferenceFiltered)">
        <Transitive>true</Transitive>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <Target Name="GeneratePropsFiles" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <_LineupPackages Include="%(ArtifactReference.PackageId)" Condition=" '%(ArtifactReference.Type)' == 'NuGetPackage' ">
        <Version>%(ArtifactReference.Version)</Version>
        <TargetFramework>%(ArtifactReference.VariableTargetFramework)</TargetFramework>
        <VariableName>%(ArtifactReference.VariableName)</VariableName>
      </_LineupPackages>

      <_LineupSources Include="%(ArtifactReference.RootDir)%(ArtifactReference.Directory)" Condition=" '%(ArtifactReference.Type)' == 'NuGetPackage' " />
    </ItemGroup>

    <RepoTasks.GeneratePackageVersionPropsFile
      Packages="@(_LineupPackages)"
      OutputPath="$(GeneratedPackageVersionPropsPath)" />

    <Copy SourceFiles="$(GeneratedPackageVersionPropsPath)" DestinationFolder="$(OutputPath)" />

    <RepoTasks.GenerateRestoreSourcesPropsFile
      Sources="@(_LineupSources)"
      OutputPath="$(GeneratedRestoreSourcePropsPath)" />

    <!-- So hacky. TODO (nate): Unify this with the PackageVersionProps file -->
    <RepoTasks.GenerateLineup
      Artifacts="@(ArtifactReference->WithMetadataValue('ExternalDependency', ''))"
      Repository="$(MSBuildProjectName)"
      OutputPath="$(RepositoryRoot)build\dependencies.g.targets"
      UseFloatingVersions="false"
      BuildNumber="$(BuildNumber)" />
  </Target>

  <Target Name="Compile" DependsOnTargets="ResolveArtifacts;GeneratePropsFiles">
    <PropertyGroup>
      <BuildArgs>$(BuildArgs) /p:DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcePropsPath)</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:DotNetPackageVersionPropsPath=$(GeneratedPackageVersionPropsPath)</BuildArgs>
      <BuildArgs>$(BuildArgs) /p:BuildNumber=$(BuildNumber) /p:Configuration=$(Configuration)</BuildArgs>
      <BuildArgs>$(BuildArgs) /t:Package /t:VerifyPackages</BuildArgs>
    </PropertyGroup>

    <Copy SourceFiles="$(UniverseRepositoryRoot)korebuild-lock.txt" DestinationFolder="$(RepositoryRoot)" />
    <Message Text="Compiling $(MSBuildProjectName)" Importance="High" />
    <Exec Command="$(BuildArgs)"
          WorkingDirectory="$(RepositoryRoot)"
          StandardOutputImportance="Normal"
          EnvironmentVariables="NUGET_PACKAGES=$(RestorePackagesPath)" />

    <ItemGroup>
      <_CompileOutputs Include="$(RepositoryRoot)artifacts\**\*" />
    </ItemGroup>

    <!-- TODO: consider writing directly to output path instead of copying. There were problems with trailing slashes :( -->
    <Copy SourceFiles="@(_CompileOutputs)" DestinationFiles="$(OutputPath)%(RecursiveDir)%(FileName)%(Extension)" />

    <Message Text="$(MSBuildProjectName) -> %(Artifact.FullPath)" Importance="High" />
    <!-- Clean the local nuget cache -->
    <RemoveDir Directories="$(RestorePackagesPath)\%(Artifact.PackageId)\%(Version)\" Condition="'%(Type)' == 'NuGetPackage'" />
  </Target>

  <Target Name="CleanRepo">
    <Error Text="KoreBuildProjectFullPath is not defined" Condition="'$(KoreBuildProjectFullPath)' == ''" />
    <MSBuild Projects="$(KoreBuildProjectFullPath)"
             Targets="Clean"
             Properties="RepositoryRoot=$(RepositoryRoot)" />
  </Target>

  <Target Name="DownloadPreBuiltArtifacts" DependsOnTargets="ResolveArtifacts">
    <ItemGroup>
      <_PackagesToDownload Include="%(Artifact.PackageId)" Version="%(Artifact.Version)" Source="$(NuGetArtifactSource)" />
    </ItemGroup>

    <RepoTasks.DownloadNuGetPackages
      Packages="@(_PackagesToDownload)"
      DestinationFolder="$(OutputPath)"
      ContinueOnError="true" />

    <ItemGroup Condition="'$(FallbackNuGetArtifactSource)' != ''">
      <_PackagesToDownload Update="@(_PackagesToDownload)" Source="$(FallbackNuGetArtifactSource)" />
    </ItemGroup>

    <!--
      For now, ignore packages that we can't download from somewhere.
      Some packages marked as 'noship' in a previous release are not available anywhere, but these are usually not dependended upon within the repo graph.
      For example, Microsoft.Extensions.Configuration.DockerSecrets
    -->
    <RepoTasks.DownloadNuGetPackages
      Packages="@(_PackagesToDownload)"
      DestinationFolder="$(OutputPath)"
      Condition="'$(FallbackNuGetArtifactSource)' != ''"
      ContinueOnError="true" />

    <Message Text="$(MSBuildProjectName) (prebuilt) -> %(Artifact.FullPath)" Importance="High" />
  </Target>

  <Target Name="ResolveArtifacts">
    <Error Text="KoreBuildProjectFullPath is not defined" Condition="'$(KoreBuildProjectFullPath)' == ''" />
    <MSBuild Projects="$(KoreBuildProjectFullPath)"
             Targets="GetArtifactInfo"
             Properties="RepositoryRoot=$(RepositoryRoot);ArtifactsDir=$(OutputPath);Configuration=$(Configuration);BuildNumber=$(BuildNumber)">
      <Output TaskParameter="TargetOutputs" ItemName="_ProjectArtifacts" />
    </MSBuild>

    <ItemGroup>
      <!-- TODO (nate): change the metadata name in KoreBuild -->
      <_ProjectArtifacts Update="@(_ProjectArtifacts)" Type="%(ArtifactType)" />
    </ItemGroup>

    <ItemGroup Condition="'$(CompileFromSource)' == 'true'">
      <Artifact Include="@(_ProjectArtifacts)" />
    </ItemGroup>
    <ItemGroup Condition="'$(CompileFromSource)' != 'true'">
      <Artifact Include="@(_ProjectArtifacts)" Condition="'%(_ProjectArtifacts.Type)' == 'NuGetPackage'" />
    </ItemGroup>
  </Target>

  <Target Name="ResolveArtifactReferences">
    <RemoveDuplicates Inputs="@(_ResolvedProjectReferencePaths)">
      <Output TaskParameter="Filtered" ItemName="ArtifactReference" />
    </RemoveDuplicates>
  </Target>

</Project>

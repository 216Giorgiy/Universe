<Project InitialTargets="GenerateKoreBuildPropsFile">
  <Import Project="push.targets" />
  <Import Project="GenerateCode.targets" />

  <PropertyGroup>
    <SubmoduleRoot>$(RepositoryRoot)modules\</SubmoduleRoot>
    <_DependencyBuildDirectory>$(RepositoryRoot).deps\build\</_DependencyBuildDirectory>
    <_DependencyPackagesDirectory>$(_DependencyBuildDirectory)</_DependencyPackagesDirectory>

    <_RepositoryBuildTargets Condition="'$(_RepositoryBuildTargets)'=='' AND '$(CompileOnly)'=='true'">/t:Package /t:VerifyPackages</_RepositoryBuildTargets>
    <_RepositoryBuildTargets Condition="'$(_RepositoryBuildTargets)'==''">/t:Verify</_RepositoryBuildTargets>
    <!-- For external packages that come from feeds will mirrored to aspnetcore feeds. -->
    <IntermediateMirrorPackageDir>$(IntermediateDir)mirror\</IntermediateMirrorPackageDir>
    <!-- For external packages that come from feeds we don't mirror. -->
    <IntermediateExternalPackageDir>$(IntermediateDir)ext\</IntermediateExternalPackageDir>
    <GeneratedPackageVersionPropsPath>$(IntermediateDir)dependencies.props</GeneratedPackageVersionPropsPath>
    <GeneratedRestoreSourcesPropsPath>$(IntermediateDir)sources.props</GeneratedRestoreSourcesPropsPath>

    <PrepareDependsOn>$(PrepareDependsOn);PrepareOutputPath</PrepareDependsOn>
    <CleanDependsOn>$(CleanDependsOn);CleanArtifacts;CleanUniverseArtifacts</CleanDependsOn>
    <RestoreDependsOn>$(RestoreDependsOn);RestoreExternalDependencies</RestoreDependsOn>
    <PackageDependsOn>$(PackageDependsOn);BuildAllMetapackage;SplitPackages</PackageDependsOn>
    <VerifyDependsOn>$(VerifyDependsOn);VerifyCoherentVersions</VerifyDependsOn>
  </PropertyGroup>

  <Target Name="GenerateKoreBuildPropsFile">
    <ItemGroup>
      <_KoreBuildPropsFile Include="%3CProject>%3CPropertyGroup>%3CKoreBuildProjectFullPath>$(MSBuildProjectFullPath)%3C/KoreBuildProjectFullPath>%3C/PropertyGroup>%3C/Project>" />
    </ItemGroup>
    <MakeDir Directories="$(IntermediateDir)" />
    <WriteLinesToFile File="$(IntermediateDir)korebuild.g.props" Lines="@(_KoreBuildPropsFile)" Overwrite="true" />
  </Target>

  <Target Name="PrepareOutputPath">
    <MakeDir Directories="$(ArtifactsDir);$(BuildDir)" />
  </Target>

  <Target Name="GeneratePropsFiles" DependsOnTargets="ResolveRepoInfo">
    <ItemGroup>
      <_LineupPackages Include="@(ExternalDependency)" />
      <_LineupPackages Include="%(ArtifactInfo.PackageId)" Version="%(ArtifactInfo.Version)" Condition=" '%(ArtifactInfo.ArtifactType)' == 'NuGetPackage' " />
    </ItemGroup>

    <RepoTasks.GeneratePackageVersionPropsFile
      Packages="@(_LineupPackages)"
      OutputPath="$(ArtifactsDir)dependencies.props" />
  </Target>

  <Target Name="CleanUniverseArtifacts">
    <RemoveDir Directories="$(RepositoryRoot)obj" Condition="Exists('$(RepositoryRoot)obj')" />
  </Target>

  <Target Name="_PrepareRepositories">
    <ItemGroup>
      <Repository Update="%(Identity)" RootPath="$(SubmoduleRoot)%(Identity)\" />
    </ItemGroup>
  </Target>

  <Target Name="ResolveRepoInfo" DependsOnTargets="_PrepareRepositories">

    <Error Text="%(Repository.RootPath) does not exist. Did you forget to clone the submodules? Run `git submodules update`." Condition="!Exists(%(Repository.RootPath))" />

    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="GetArtifactInfo"
             Properties="RepositoryRoot=%(Repository.RootPath);Configuration=$(Configuration);BuildNumber=$(BuildNumber);IsFinalBuild=%(Repository.UseBuildCache)"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="ArtifactInfo" />
    </MSBuild>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="ResolveSolutions"
             Properties="RepositoryRoot=%(Repository.RootPath);Configuration=$(Configuration);BuildNumber=$(BuildNumber);IsFinalBuild=%(Repository.UseBuildCache)"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="Solution" />
    </MSBuild>


    <ItemGroup>
      <Solution Update="@(Solution)" Build="true" />
      <_NoBuildSolution Update="@(_NoBuildSolution)" Build="false" />
      <Solution Include="@(_NoBuildSolution)" />
    </ItemGroup>

    <Error Text="No solutions were found in '$(SubmoduleRoot)'" Condition="@(Solution->Count()) == 0" />
  </Target>

  <Target Name="ComputeGraph" DependsOnTargets="ResolveRepoInfo;GeneratePropsFiles">
    <RepoTasks.AnalyzeBuildGraph
      Solutions="@(Solution)"
      Artifacts="@(ArtifactInfo)"
      Dependencies="@(ExternalDependency)"
      StartGraphAt="$(BuildGraphOf)"
      Properties="Configuration=$(Configuration);BuildNumber=$(BuildNumber);DotNetPackageVersionPropsPath=$(GeneratedPackageVersionPropsPath);DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcesPropsPath)">
      <Output TaskParameter="RepositoryBuildOrder" ItemName="RepositoryBuildOrder" />
    </RepoTasks.AnalyzeBuildGraph>
  </Target>

  <Target Name="SplitPackages">
    <ItemGroup>
      <PackageArtifactFile Include="$(BuildDir)*.nupkg" />
      <ExternalDependencyPackage Include="@(ExternalDependency->WithMetadataValue('Mirror', 'true'))" Category="mirror" />
      <_MirroredPackageFiles Include="$(IntermediateMirrorPackageDir)*.nupkg" />
    </ItemGroup>

    <RepoTasks.CopyPackagesToSplitFolders
      Packages="@(PackageArtifact);@(ExternalDependencyPackage)"
      Files="@(PackageArtifactFile);@(_MirroredPackageFiles)"
      DestinationFolder="$(ArtifactsDir)"
      Overwrite="true" />
  </Target>

  <Target Name="VerifyCoherentVersions" DependsOnTargets="ResolveRepoInfo">
    <ItemGroup>
      <ShippingPackageFiles Include="$(ArtifactsDir)ship\*.nupkg" />
      <ShippedExternalDependency Include="%(ShippedArtifactInfo.PackageId)" Version="%(Version)" />
    </ItemGroup>

    <RepoTasks.VerifyCoherentVersions
      PackageFiles="@(ShippingPackageFiles)"
      ExternalDependencies="@(ExternalDependency);@(ShippedExternalDependency)" />
  </Target>

</Project>

<Project InitialTargets="GenerateKoreBuildPropsFile">
  <Import Project="push.targets" />

  <PropertyGroup>
    <_DependencyBuildDirectory>$(RepositoryRoot).deps\build\</_DependencyBuildDirectory>

    <CleanDependsOn>$(CleanDependsOn);CleanArtifacts</CleanDependsOn>
    <RestoreDependsOn></RestoreDependsOn>
    <CompileDependsOn></CompileDependsOn>
    <PackageDependsOn>$(PackageDependsOn);SplitPackages</PackageDependsOn>
    <VerifyDependsOn>$(VerifyDependsOn);VerifyCoherentVersions</VerifyDependsOn>
  </PropertyGroup>

  <Target Name="GenerateKoreBuildPropsFile">
    <ItemGroup>
      <_KoreBuildPropsFile Include="%3CProject>%3CPropertyGroup>%3CBuildNumber>$(BuildNumber)%3C/BuildNumber>%3CKoreBuildProjectFullPath>$(MSBuildProjectFullPath)%3C/KoreBuildProjectFullPath>%3C/PropertyGroup>%3C/Project>" />
    </ItemGroup>
    <MakeDir Directories="$(IntermediateDir)" />
    <WriteLinesToFile File="$(IntermediateDir)korebuild.g.props" Lines="@(_KoreBuildPropsFile)" Overwrite="true" />
  </Target>

  <Target Name="GeneratePropsFiles" DependsOnTargets="ResolveRepoInfo">
    <ItemGroup>
      <_LineupPackages Include="@(ExternalDependency)" />
      <_LineupPackages Include="%(ArtifactInfo.PackageId)" Version="%(ArtifactInfo.Version)" Condition=" '%(ArtifactInfo.ArtifactType)' == 'NuGetPackage' " />

      <_LineupSources Include="$(_DependencyPackagesDirectory)" Condition="'$(_DependencyPackagesDirectory)' != '' AND Exists('$(_DependencyPackagesDirectory)')" />
      <_LineupSources Include="$(BuildDir)" />
      <_LineupSources Include="$(IntermediateExternalPackageDir)" />
      <_LineupSources Include="$(IntermediateMirrorPackageDir)" />
    </ItemGroup>

    <RepoTasks.GeneratePackageVersionPropsFile
      Packages="@(_LineupPackages)"
      OutputPath="$(GeneratedPackageVersionPropsPath)" />

    <Copy SourceFiles="$(GeneratedPackageVersionPropsPath)" DestinationFolder="$(ArtifactsDir)" />

    <RepoTasks.GenerateRestoreSourcesPropsFile
      Sources="@(_LineupSources)"
      OutputPath="$(GeneratedRestoreSourcesPropsPath)" />
  </Target>

  <Target Name="ResolveRepoInfo">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="GetArtifactInfo"
             Properties="RepositoryRoot=$(_CloneRepositoryRoot)%(Repository.Identity)\;Configuration=$(Configuration);BuildNumber=$(BuildNumber)"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="ArtifactInfo" />
    </MSBuild>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="ResolveSolutions"
             Properties="RepositoryRoot=$(_CloneRepositoryRoot)%(Repository.Identity)\;Configuration=$(Configuration);BuildNumber=$(BuildNumber)"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="Solution" />
    </MSBuild>

    <!--
      Analyze what was shipped in these repos.
      This is required so we can verify that cascading versions are consistent.
    -->
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="GetArtifactInfo"
             Properties="RepositoryRoot=$(_CloneRepositoryRoot)%(ShippedRepository.Identity)\;Configuration=$(Configuration);BuildNumber=$(BuildNumber);IsFinalBuild=true"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="ShippedArtifactInfo" />
    </MSBuild>
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="ResolveSolutions"
             Properties="RepositoryRoot=$(_CloneRepositoryRoot)%(ShippedRepository.Identity)\;Configuration=$(Configuration);BuildNumber=$(BuildNumber)"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="_NoBuildSolution" />
    </MSBuild>

    <ItemGroup>
      <Solution Update="@(Solution)" Build="true" />
      <_NoBuildSolution Update="@(_NoBuildSolution)" Build="false" />
      <Solution Include="@(_NoBuildSolution)" />
    </ItemGroup>

    <Error Text="No solutions were found in '$(_CloneRepositoryRoot)'" Condition="@(Solution->Count()) == 0" />
  </Target>

  <Target Name="ComputeGraph" DependsOnTargets="ResolveRepoInfo;GeneratePropsFiles">
    <RepoTasks.AnalyzeBuildGraph
      Solutions="@(Solution)"
      Artifacts="@(ArtifactInfo)"
      Dependencies="@(ExternalDependency)"
      StartGraphAt="$(BuildGraphOf)"
<<<<<<< HEAD
      Properties="Configuration=$(Configuration);BuildNumber=$(BuildNumber);DotNetPackageVersionPropsPath=$(GeneratedPackageVersionPropsPath);DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcesPropsPath)">
      <Output TaskParameter="RepositoryBuildOrder" ItemName="RepositoryBuildOrder" />
    </RepoTasks.AnalyzeBuildGraph>
=======
      Properties="Configuration=$(Configuration);BuildNumber=$(BuildNumber);DotNetPackageVersionPropsPath=$(GeneratedPackageVersionPropsPath);DotNetRestoreSourcePropsPath=$(GeneratedRestoreSourcesPropsPath)" />
>>>>>>> WIP implementation of the project reference build
  </Target>

  <Target Name="SplitPackages">
    <ItemGroup>
      <PackageArtifactFile Include="$(BuildDir)*.nupkg" />
      <ExternalDependencyPackage Include="@(ExternalDependency->WithMetadataValue('Mirror', 'true'))" Category="mirror" />
      <_MirroredPackageFiles Include="$(IntermediateMirrorPackageDir)*.nupkg" />
    </ItemGroup>

    <RepoTasks.CopyPackagesToSplitFolders
      Packages="@(PackageArtifact);@(ExternalDependencyPackage)"
      Files="@(PackageArtifactFile);@(_MirroredPackageFiles)"
      DestinationFolder="$(ArtifactsDir)"
      Overwrite="true" />
  </Target>

  <Target Name="VerifyCoherentVersions" DependsOnTargets="ResolveRepoInfo">
    <ItemGroup>
      <ShippingPackageFiles Include="$(ArtifactsDir)ship\*.nupkg" />
      <ShippedExternalDependency Include="%(ShippedArtifactInfo.PackageId)" Version="%(Version)" />
    </ItemGroup>

    <RepoTasks.VerifyCoherentVersions
      PackageFiles="@(ShippingPackageFiles)"
      ExternalDependencies="@(ExternalDependency);@(ShippedExternalDependency)" />
  </Target>
</Project>
